/*
 * Generated File : Remote_CustomLobby_SceneController
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.Dueoksini;
using CT.Common.Gameplay.Infos;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Gameplay.RedHood;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.SyncObjects
{
	[Serializable]
	public partial class CustomLobby_SceneController
	{
		public override NetworkObjectType Type => NetworkObjectType.CustomLobby_SceneController;
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_ReadyGame(bool isReady);
		[SyncRpc(SyncType.ReliableTarget)]
		public virtual partial void Server_TryStartGameCallback(StartGameResultType result);
		[SyncRpc]
		public virtual partial void Server_StartGameCountdown(float second);
		[SyncRpc]
		public virtual partial void Server_CancelStartGameCountdown();
		public CustomLobby_SceneController()
		{
		}
		public partial void Client_ReadyGame(bool isReady)
		{
			Client_ReadyGamebCallstack.Add(isReady);
			_dirtyReliable_0[1] = true;
			MarkDirtyReliable();
		}
		protected List<bool> Client_ReadyGamebCallstack = new(4);
		public override void ClearDirtyReliable()
		{
			_isDirtyReliable = false;
			_dirtyReliable_0.Clear();
			Client_OnSceneLoadedCallstackCount = 0;
			Client_ReadyGamebCallstack.Clear();
		}
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer)
		{
			_dirtyReliable_0.Serialize(writer);
			if (_dirtyReliable_0[0])
			{
				writer.Put((byte)Client_OnSceneLoadedCallstackCount);
			}
			if (_dirtyReliable_0[1])
			{
				byte count = (byte)Client_ReadyGamebCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = Client_ReadyGamebCallstack[i];
					writer.Put(arg);
				}
			}
		}
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!_gameSceneIdentity.TryDeserialize(reader)) return false;
				_onGameSceneIdentityChanged?.Invoke(_gameSceneIdentity);
			}
			if (dirtyReliable_0[1])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					GameSceneIdentity gameScene = new();
					if (!gameScene.TryDeserialize(reader)) return false;
					Server_TryLoadSceneAll(gameScene);
				}
			}
			if (dirtyReliable_0[2])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					GameSceneIdentity gameScene = new();
					if (!gameScene.TryDeserialize(reader)) return false;
					Server_TryLoadScene(gameScene);
				}
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadByte(out var resultValue)) return false;
					StartGameResultType result = (StartGameResultType)resultValue;
					Server_TryStartGameCallback(result);
				}
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadSingle(out float second)) return false;
					Server_StartGameCountdown(second);
				}
			}
			if (dirtyReliable_0[5])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Server_CancelStartGameCountdown();
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!_gameSceneIdentity.TryDeserialize(reader)) return false;
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_gameSceneIdentity = new();
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				GameSceneIdentity.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					GameSceneIdentity.IgnoreStatic(reader);
				}
			}
			if (dirtyReliable_0[2])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					GameSceneIdentity.IgnoreStatic(reader);
				}
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
				}
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
				}
			}
			if (dirtyReliable_0[5])
			{
				reader.Ignore(1);
			}
		}
		public new static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				GameSceneIdentity.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					GameSceneIdentity.IgnoreStatic(reader);
				}
			}
			if (dirtyReliable_0[2])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					GameSceneIdentity.IgnoreStatic(reader);
				}
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
				}
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
				}
			}
			if (dirtyReliable_0[5])
			{
				reader.Ignore(1);
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public new static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
