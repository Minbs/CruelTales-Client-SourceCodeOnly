/*
 * Generated File : Remote_CameraController
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.Dueoksini;
using CT.Common.Gameplay.Infos;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Gameplay.RedHood;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.SyncObjects
{
	[Serializable]
	public partial class CameraController
	{
		public override NetworkObjectType Type => NetworkObjectType.CameraController;
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_CannotFindBindTarget();
		[SyncVar]
		private NetworkIdentity _targetId = new();
		public NetworkIdentity TargetId => _targetId;
		private Action<NetworkIdentity>? _onTargetIdChanged;
		public event Action<NetworkIdentity> OnTargetIdChanged
		{
			add => _onTargetIdChanged += value;
			remove => _onTargetIdChanged -= value;
		}
		[SyncVar]
		private float _followSpeed;
		public float FollowSpeed => _followSpeed;
		private Action<float>? _onFollowSpeedChanged;
		public event Action<float> OnFollowSpeedChanged
		{
			add => _onFollowSpeedChanged += value;
			remove => _onFollowSpeedChanged -= value;
		}
		[SyncRpc]
		public partial void Server_MoveTo(Vector2 position);
		[SyncRpc]
		public partial void Server_LookAt(Vector2 position);
		[SyncRpc]
		public partial void Server_LookAt(Vector2 position, float time);
		[SyncRpc]
		public partial void Server_Shake();
		[SyncRpc]
		public partial void Server_Zoom(float zoom);
		public CameraController()
		{
		}
		private BitmaskByte _dirtyReliable_0 = new();
		public partial void Client_CannotFindBindTarget()
		{
			Client_CannotFindBindTargetCallstackCount++;
			_dirtyReliable_0[0] = true;
			MarkDirtyReliable();
		}
		private byte Client_CannotFindBindTargetCallstackCount = 0;
		public override void ClearDirtyReliable()
		{
			_isDirtyReliable = false;
			_dirtyReliable_0.Clear();
			Client_CannotFindBindTargetCallstackCount = 0;
		}
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer)
		{
			_dirtyReliable_0.Serialize(writer);
			if (_dirtyReliable_0[0])
			{
				writer.Put((byte)Client_CannotFindBindTargetCallstackCount);
			}
		}
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!_targetId.TryDeserialize(reader)) return false;
				_onTargetIdChanged?.Invoke(_targetId);
			}
			if (dirtyReliable_0[1])
			{
				if (!reader.TryReadSingle(out _followSpeed)) return false;
				_onFollowSpeedChanged?.Invoke(_followSpeed);
			}
			if (dirtyReliable_0[2])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadVector2(out var position)) return false;
					Server_MoveTo(position);
				}
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadVector2(out var position)) return false;
					Server_LookAt(position);
				}
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadVector2(out var position)) return false;
					if (!reader.TryReadSingle(out float time)) return false;
					Server_LookAt(position, time);
				}
			}
			if (dirtyReliable_0[5])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Server_Shake();
				}
			}
			if (dirtyReliable_0[6])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadSingle(out float zoom)) return false;
					Server_Zoom(zoom);
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!_targetId.TryDeserialize(reader)) return false;
			if (!reader.TryReadSingle(out _followSpeed)) return false;
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_targetId = new();
			_followSpeed = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				NetworkIdentity.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[2])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Vector2SerializeExtension.IgnoreStatic(reader);
				}
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Vector2SerializeExtension.IgnoreStatic(reader);
				}
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Vector2SerializeExtension.IgnoreStatic(reader);
					reader.Ignore(4);
				}
			}
			if (dirtyReliable_0[5])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[6])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				NetworkIdentity.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[2])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Vector2SerializeExtension.IgnoreStatic(reader);
				}
			}
			if (dirtyReliable_0[3])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Vector2SerializeExtension.IgnoreStatic(reader);
				}
			}
			if (dirtyReliable_0[4])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					Vector2SerializeExtension.IgnoreStatic(reader);
					reader.Ignore(4);
				}
			}
			if (dirtyReliable_0[5])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[6])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(4);
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
