/*
 * Generated File : Remote_Interactor
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.Dueoksini;
using CT.Common.Gameplay.Infos;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Gameplay.RedHood;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.SyncObjects
{
	[Serializable]
	public partial class Interactor
	{
		public override NetworkObjectType Type => NetworkObjectType.Interactor;
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_TryInteract();
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_TryCancel();
		[SyncVar]
		protected InteractionBehaviourType _behaviourType;
		public InteractionBehaviourType BehaviourType => _behaviourType;
		protected Action<InteractionBehaviourType>? _onBehaviourTypeChanged;
		public event Action<InteractionBehaviourType> OnBehaviourTypeChanged
		{
			add => _onBehaviourTypeChanged += value;
			remove => _onBehaviourTypeChanged -= value;
		}
		[SyncVar]
		protected InteractorSize _size = new();
		public InteractorSize Size => _size;
		protected Action<InteractorSize>? _onSizeChanged;
		public event Action<InteractorSize> OnSizeChanged
		{
			add => _onSizeChanged += value;
			remove => _onSizeChanged -= value;
		}
		[SyncVar]
		protected NetworkIdentity _currentSubjectId = new();
		public NetworkIdentity CurrentSubjectId => _currentSubjectId;
		protected Action<NetworkIdentity>? _onCurrentSubjectIdChanged;
		public event Action<NetworkIdentity> OnCurrentSubjectIdChanged
		{
			add => _onCurrentSubjectIdChanged += value;
			remove => _onCurrentSubjectIdChanged -= value;
		}
		[SyncVar]
		protected float _progressTime;
		public float ProgressTime => _progressTime;
		protected Action<float>? _onProgressTimeChanged;
		public event Action<float> OnProgressTimeChanged
		{
			add => _onProgressTimeChanged += value;
			remove => _onProgressTimeChanged -= value;
		}
		[SyncVar]
		protected float _cooltime;
		public float Cooltime => _cooltime;
		protected Action<float>? _onCooltimeChanged;
		public event Action<float> OnCooltimeChanged
		{
			add => _onCooltimeChanged += value;
			remove => _onCooltimeChanged -= value;
		}
		[SyncVar]
		protected bool _interactable;
		public bool Interactable => _interactable;
		protected Action<bool>? _onInteractableChanged;
		public event Action<bool> OnInteractableChanged
		{
			add => _onInteractableChanged += value;
			remove => _onInteractableChanged -= value;
		}
		[SyncRpc(SyncType.ReliableTarget)]
		public virtual partial void Server_InteractResult(InteractResultType result);
		public Interactor()
		{
		}
		protected BitmaskByte _dirtyReliable_0 = new();
		public partial void Client_TryInteract()
		{
			Client_TryInteractCallstackCount++;
			_dirtyReliable_0[0] = true;
			MarkDirtyReliable();
		}
		protected byte Client_TryInteractCallstackCount = 0;
		public partial void Client_TryCancel()
		{
			Client_TryCancelCallstackCount++;
			_dirtyReliable_0[1] = true;
			MarkDirtyReliable();
		}
		protected byte Client_TryCancelCallstackCount = 0;
		public override void ClearDirtyReliable()
		{
			_isDirtyReliable = false;
			_dirtyReliable_0.Clear();
			Client_TryInteractCallstackCount = 0;
			Client_TryCancelCallstackCount = 0;
		}
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer)
		{
			_dirtyReliable_0.Serialize(writer);
			if (_dirtyReliable_0[0])
			{
				writer.Put((byte)Client_TryInteractCallstackCount);
			}
			if (_dirtyReliable_0[1])
			{
				writer.Put((byte)Client_TryCancelCallstackCount);
			}
		}
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!reader.TryReadByte(out var _behaviourTypeValue)) return false;
				_behaviourType = (InteractionBehaviourType)_behaviourTypeValue;
				_onBehaviourTypeChanged?.Invoke(_behaviourType);
			}
			if (dirtyReliable_0[1])
			{
				if (!_size.TryDeserialize(reader)) return false;
				_onSizeChanged?.Invoke(_size);
			}
			if (dirtyReliable_0[2])
			{
				if (!_currentSubjectId.TryDeserialize(reader)) return false;
				_onCurrentSubjectIdChanged?.Invoke(_currentSubjectId);
			}
			if (dirtyReliable_0[3])
			{
				if (!reader.TryReadSingle(out _progressTime)) return false;
				_onProgressTimeChanged?.Invoke(_progressTime);
			}
			if (dirtyReliable_0[4])
			{
				if (!reader.TryReadSingle(out _cooltime)) return false;
				_onCooltimeChanged?.Invoke(_cooltime);
			}
			if (dirtyReliable_0[5])
			{
				if (!reader.TryReadBoolean(out _interactable)) return false;
				_onInteractableChanged?.Invoke(_interactable);
			}
			if (dirtyReliable_0[6])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadByte(out var resultValue)) return false;
					InteractResultType result = (InteractResultType)resultValue;
					Server_InteractResult(result);
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!reader.TryReadByte(out var _behaviourTypeValue)) return false;
			_behaviourType = (InteractionBehaviourType)_behaviourTypeValue;
			if (!_size.TryDeserialize(reader)) return false;
			if (!_currentSubjectId.TryDeserialize(reader)) return false;
			if (!reader.TryReadSingle(out _progressTime)) return false;
			if (!reader.TryReadSingle(out _cooltime)) return false;
			if (!reader.TryReadBoolean(out _interactable)) return false;
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_behaviourType = (InteractionBehaviourType)0;
			_size = new();
			_currentSubjectId = new();
			_progressTime = 0;
			_cooltime = 0;
			_interactable = false;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[1])
			{
				InteractorSize.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[2])
			{
				NetworkIdentity.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[3])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[4])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[5])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[6])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[1])
			{
				InteractorSize.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[2])
			{
				NetworkIdentity.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[3])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[4])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[5])
			{
				reader.Ignore(1);
			}
			if (dirtyReliable_0[6])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
