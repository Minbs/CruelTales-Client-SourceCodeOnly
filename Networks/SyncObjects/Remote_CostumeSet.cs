/*
 * Generated File : Remote_CostumeSet
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.Dueoksini;
using CT.Common.Gameplay.Infos;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Gameplay.RedHood;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.SyncObjects
{
	[Serializable]
	public partial class CostumeSet : IRemoteSynchronizable
	{
		[SyncVar]
		private int _back;
		public int Back => _back;
		private Action<int>? _onBackChanged;
		public event Action<int> OnBackChanged
		{
			add => _onBackChanged += value;
			remove => _onBackChanged -= value;
		}
		[SyncVar]
		private int _tail;
		public int Tail => _tail;
		private Action<int>? _onTailChanged;
		public event Action<int> OnTailChanged
		{
			add => _onTailChanged += value;
			remove => _onTailChanged -= value;
		}
		[SyncVar]
		private int _cheek;
		public int Cheek => _cheek;
		private Action<int>? _onCheekChanged;
		public event Action<int> OnCheekChanged
		{
			add => _onCheekChanged += value;
			remove => _onCheekChanged -= value;
		}
		[SyncVar]
		private int _dress;
		public int Dress => _dress;
		private Action<int>? _onDressChanged;
		public event Action<int> OnDressChanged
		{
			add => _onDressChanged += value;
			remove => _onDressChanged -= value;
		}
		[SyncVar]
		private int _eyes;
		public int Eyes => _eyes;
		private Action<int>? _onEyesChanged;
		public event Action<int> OnEyesChanged
		{
			add => _onEyesChanged += value;
			remove => _onEyesChanged -= value;
		}
		[SyncVar]
		private int _eyebrow;
		public int Eyebrow => _eyebrow;
		private Action<int>? _onEyebrowChanged;
		public event Action<int> OnEyebrowChanged
		{
			add => _onEyebrowChanged += value;
			remove => _onEyebrowChanged -= value;
		}
		[SyncVar]
		private int _faceAcc;
		public int FaceAcc => _faceAcc;
		private Action<int>? _onFaceAccChanged;
		public event Action<int> OnFaceAccChanged
		{
			add => _onFaceAccChanged += value;
			remove => _onFaceAccChanged -= value;
		}
		[SyncVar]
		private int _hair;
		public int Hair => _hair;
		private Action<int>? _onHairChanged;
		public event Action<int> OnHairChanged
		{
			add => _onHairChanged += value;
			remove => _onHairChanged -= value;
		}
		[SyncVar]
		private int _hairAcc;
		public int HairAcc => _hairAcc;
		private Action<int>? _onHairAccChanged;
		public event Action<int> OnHairAccChanged
		{
			add => _onHairAccChanged += value;
			remove => _onHairAccChanged -= value;
		}
		[SyncVar]
		private int _hairHelmet;
		public int HairHelmet => _hairHelmet;
		private Action<int>? _onHairHelmetChanged;
		public event Action<int> OnHairHelmetChanged
		{
			add => _onHairHelmetChanged += value;
			remove => _onHairHelmetChanged -= value;
		}
		[SyncVar]
		private int _headgear;
		public int Headgear => _headgear;
		private Action<int>? _onHeadgearChanged;
		public event Action<int> OnHeadgearChanged
		{
			add => _onHeadgearChanged += value;
			remove => _onHeadgearChanged -= value;
		}
		[SyncVar]
		private int _lips;
		public int Lips => _lips;
		private Action<int>? _onLipsChanged;
		public event Action<int> OnLipsChanged
		{
			add => _onLipsChanged += value;
			remove => _onLipsChanged -= value;
		}
		[SyncVar]
		private int _nose;
		public int Nose => _nose;
		private Action<int>? _onNoseChanged;
		public event Action<int> OnNoseChanged
		{
			add => _onNoseChanged += value;
			remove => _onNoseChanged -= value;
		}
		[SyncVar]
		private int _shoes;
		public int Shoes => _shoes;
		private Action<int>? _onShoesChanged;
		public event Action<int> OnShoesChanged
		{
			add => _onShoesChanged += value;
			remove => _onShoesChanged -= value;
		}
		[SyncVar]
		private int _hammer;
		public int Hammer => _hammer;
		private Action<int>? _onHammerChanged;
		public event Action<int> OnHammerChanged
		{
			add => _onHammerChanged += value;
			remove => _onHammerChanged -= value;
		}
		[SyncVar]
		private NetColor _skinColor = new();
		public NetColor SkinColor => _skinColor;
		private Action<NetColor>? _onSkinColorChanged;
		public event Action<NetColor> OnSkinColorChanged
		{
			add => _onSkinColorChanged += value;
			remove => _onSkinColorChanged -= value;
		}
		[SyncVar]
		private NetColor _hairColor = new();
		public NetColor HairColor => _hairColor;
		private Action<NetColor>? _onHairColorChanged;
		public event Action<NetColor> OnHairColorChanged
		{
			add => _onHairColorChanged += value;
			remove => _onHairColorChanged -= value;
		}
		[SyncVar]
		private NetColor _eyesColor = new();
		public NetColor EyesColor => _eyesColor;
		private Action<NetColor>? _onEyesColorChanged;
		public event Action<NetColor> OnEyesColorChanged
		{
			add => _onEyesColorChanged += value;
			remove => _onEyesColorChanged -= value;
		}
		[AllowNull] public IDirtyable _owner;
		public void BindOwner(IDirtyable owner) => _owner = owner;
		public CostumeSet()
		{
		}
		public CostumeSet(IDirtyable owner)
		{
			_owner = owner;
		}
		protected bool _isDirtyReliable;
		public bool IsDirtyReliable => _isDirtyReliable;
		public void MarkDirtyReliable()
		{
			_isDirtyReliable = true;
			_owner.MarkDirtyReliable();
		}
		protected bool _isDirtyUnreliable;
		public bool IsDirtyUnreliable => _isDirtyUnreliable;
		public void MarkDirtyUnreliable()
		{
			_isDirtyUnreliable = true;
			_owner.MarkDirtyUnreliable();
		}
		public void ClearDirtyReliable() { }
		public void ClearDirtyUnreliable() { }
		public void SerializeSyncReliable(IPacketWriter writer) { }
		public void SerializeSyncUnreliable(IPacketWriter writer) { }
		public void InitializeMasterProperties() { }
		public bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
				if (dirtyReliable_0[0])
				{
					if (!reader.TryReadInt32(out _back)) return false;
					_onBackChanged?.Invoke(_back);
				}
				if (dirtyReliable_0[1])
				{
					if (!reader.TryReadInt32(out _tail)) return false;
					_onTailChanged?.Invoke(_tail);
				}
				if (dirtyReliable_0[2])
				{
					if (!reader.TryReadInt32(out _cheek)) return false;
					_onCheekChanged?.Invoke(_cheek);
				}
				if (dirtyReliable_0[3])
				{
					if (!reader.TryReadInt32(out _dress)) return false;
					_onDressChanged?.Invoke(_dress);
				}
				if (dirtyReliable_0[4])
				{
					if (!reader.TryReadInt32(out _eyes)) return false;
					_onEyesChanged?.Invoke(_eyes);
				}
				if (dirtyReliable_0[5])
				{
					if (!reader.TryReadInt32(out _eyebrow)) return false;
					_onEyebrowChanged?.Invoke(_eyebrow);
				}
				if (dirtyReliable_0[6])
				{
					if (!reader.TryReadInt32(out _faceAcc)) return false;
					_onFaceAccChanged?.Invoke(_faceAcc);
				}
				if (dirtyReliable_0[7])
				{
					if (!reader.TryReadInt32(out _hair)) return false;
					_onHairChanged?.Invoke(_hair);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
				if (dirtyReliable_1[0])
				{
					if (!reader.TryReadInt32(out _hairAcc)) return false;
					_onHairAccChanged?.Invoke(_hairAcc);
				}
				if (dirtyReliable_1[1])
				{
					if (!reader.TryReadInt32(out _hairHelmet)) return false;
					_onHairHelmetChanged?.Invoke(_hairHelmet);
				}
				if (dirtyReliable_1[2])
				{
					if (!reader.TryReadInt32(out _headgear)) return false;
					_onHeadgearChanged?.Invoke(_headgear);
				}
				if (dirtyReliable_1[3])
				{
					if (!reader.TryReadInt32(out _lips)) return false;
					_onLipsChanged?.Invoke(_lips);
				}
				if (dirtyReliable_1[4])
				{
					if (!reader.TryReadInt32(out _nose)) return false;
					_onNoseChanged?.Invoke(_nose);
				}
				if (dirtyReliable_1[5])
				{
					if (!reader.TryReadInt32(out _shoes)) return false;
					_onShoesChanged?.Invoke(_shoes);
				}
				if (dirtyReliable_1[6])
				{
					if (!reader.TryReadInt32(out _hammer)) return false;
					_onHammerChanged?.Invoke(_hammer);
				}
				if (dirtyReliable_1[7])
				{
					if (!_skinColor.TryDeserialize(reader)) return false;
					_onSkinColorChanged?.Invoke(_skinColor);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyReliable_2 = reader.ReadBitmaskByte();
				if (dirtyReliable_2[0])
				{
					if (!_hairColor.TryDeserialize(reader)) return false;
					_onHairColorChanged?.Invoke(_hairColor);
				}
				if (dirtyReliable_2[1])
				{
					if (!_eyesColor.TryDeserialize(reader)) return false;
					_onEyesColorChanged?.Invoke(_eyesColor);
				}
			}
			return true;
		}
		public bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!reader.TryReadInt32(out _back)) return false;
			if (!reader.TryReadInt32(out _tail)) return false;
			if (!reader.TryReadInt32(out _cheek)) return false;
			if (!reader.TryReadInt32(out _dress)) return false;
			if (!reader.TryReadInt32(out _eyes)) return false;
			if (!reader.TryReadInt32(out _eyebrow)) return false;
			if (!reader.TryReadInt32(out _faceAcc)) return false;
			if (!reader.TryReadInt32(out _hair)) return false;
			if (!reader.TryReadInt32(out _hairAcc)) return false;
			if (!reader.TryReadInt32(out _hairHelmet)) return false;
			if (!reader.TryReadInt32(out _headgear)) return false;
			if (!reader.TryReadInt32(out _lips)) return false;
			if (!reader.TryReadInt32(out _nose)) return false;
			if (!reader.TryReadInt32(out _shoes)) return false;
			if (!reader.TryReadInt32(out _hammer)) return false;
			if (!_skinColor.TryDeserialize(reader)) return false;
			if (!_hairColor.TryDeserialize(reader)) return false;
			if (!_eyesColor.TryDeserialize(reader)) return false;
			return true;
		}
		public void InitializeRemoteProperties()
		{
			_back = 0;
			_tail = 0;
			_cheek = 0;
			_dress = 0;
			_eyes = 0;
			_eyebrow = 0;
			_faceAcc = 0;
			_hair = 0;
			_hairAcc = 0;
			_hairHelmet = 0;
			_headgear = 0;
			_lips = 0;
			_nose = 0;
			_shoes = 0;
			_hammer = 0;
			_skinColor = new();
			_hairColor = new();
			_eyesColor = new();
		}
		public void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
				if (dirtyReliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
				if (dirtyReliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[7])
				{
					NetColor.IgnoreStatic(reader);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyReliable_2 = reader.ReadBitmaskByte();
				if (dirtyReliable_2[0])
				{
					NetColor.IgnoreStatic(reader);
				}
				if (dirtyReliable_2[1])
				{
					NetColor.IgnoreStatic(reader);
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte masterDirty = reader.ReadBitmaskByte();
			if (masterDirty[0])
			{
				BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
				if (dirtyReliable_0[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(4);
				}
			}
			if (masterDirty[1])
			{
				BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
				if (dirtyReliable_1[0])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[1])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[5])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[6])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_1[7])
				{
					NetColor.IgnoreStatic(reader);
				}
			}
			if (masterDirty[2])
			{
				BitmaskByte dirtyReliable_2 = reader.ReadBitmaskByte();
				if (dirtyReliable_2[0])
				{
					NetColor.IgnoreStatic(reader);
				}
				if (dirtyReliable_2[1])
				{
					NetColor.IgnoreStatic(reader);
				}
			}
		}
		public void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
