/*
 * Generated File : Remote_DueoksiniTable
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.Dueoksini;
using CT.Common.Gameplay.Infos;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Gameplay.RedHood;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.SyncObjects
{
	[Serializable]
	public partial class DueoksiniTable
	{
		public override NetworkObjectType Type => NetworkObjectType.DueoksiniTable;
		[SyncVar]
		protected Faction _team;
		public Faction Team => _team;
		protected Action<Faction>? _onTeamChanged;
		public event Action<Faction> OnTeamChanged
		{
			add => _onTeamChanged += value;
			remove => _onTeamChanged -= value;
		}
		[SyncObject]
		protected readonly SyncDictionary<NetInt32, NetByte> _itemCountByType;
		public SyncDictionary<NetInt32, NetByte> ItemCountByType => _itemCountByType;
		protected Action<SyncDictionary<NetInt32, NetByte>>? _onItemCountByTypeChanged;
		public event Action<SyncDictionary<NetInt32, NetByte>> OnItemCountByTypeChanged
		{
			add => _onItemCountByTypeChanged += value;
			remove => _onItemCountByTypeChanged -= value;
		}
		public DueoksiniTable()
		{
			_itemCountByType = new(this);
		}
		public override void ClearDirtyReliable()
		{
			_isDirtyReliable = false;
			_dirtyReliable_0.Clear();
			Client_TryInteractCallstackCount = 0;
			Client_TryCancelCallstackCount = 0;
		}
		public override void ClearDirtyUnreliable() { }
		public override void SerializeSyncReliable(IPacketWriter writer)
		{
			_dirtyReliable_0.Serialize(writer);
			if (_dirtyReliable_0[0])
			{
				writer.Put((byte)Client_TryInteractCallstackCount);
			}
			if (_dirtyReliable_0[1])
			{
				writer.Put((byte)Client_TryCancelCallstackCount);
			}
		}
		public override void SerializeSyncUnreliable(IPacketWriter writer) { }
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					if (!reader.TryReadByte(out var _behaviourTypeValue)) return false;
					_behaviourType = (InteractionBehaviourType)_behaviourTypeValue;
					_onBehaviourTypeChanged?.Invoke(_behaviourType);
				}
				if (dirtyReliable_0[1])
				{
					if (!_size.TryDeserialize(reader)) return false;
					_onSizeChanged?.Invoke(_size);
				}
				if (dirtyReliable_0[2])
				{
					if (!_currentSubjectId.TryDeserialize(reader)) return false;
					_onCurrentSubjectIdChanged?.Invoke(_currentSubjectId);
				}
				if (dirtyReliable_0[3])
				{
					if (!reader.TryReadSingle(out _progressTime)) return false;
					_onProgressTimeChanged?.Invoke(_progressTime);
				}
				if (dirtyReliable_0[4])
				{
					if (!reader.TryReadSingle(out _cooltime)) return false;
					_onCooltimeChanged?.Invoke(_cooltime);
				}
				if (dirtyReliable_0[5])
				{
					if (!reader.TryReadBoolean(out _interactable)) return false;
					_onInteractableChanged?.Invoke(_interactable);
				}
				if (dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadByte(out var resultValue)) return false;
						InteractResultType result = (InteractResultType)resultValue;
						Server_InteractResult(result);
					}
				}
				if (dirtyReliable_0[7])
				{
					if (!reader.TryReadByte(out var _teamValue)) return false;
					_team = (Faction)_teamValue;
					_onTeamChanged?.Invoke(_team);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					if (!_itemCountByType.TryDeserializeSyncReliable(reader)) return false;
					_onItemCountByTypeChanged?.Invoke(_itemCountByType);
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!reader.TryReadByte(out var _behaviourTypeValue)) return false;
			_behaviourType = (InteractionBehaviourType)_behaviourTypeValue;
			if (!_size.TryDeserialize(reader)) return false;
			if (!_currentSubjectId.TryDeserialize(reader)) return false;
			if (!reader.TryReadSingle(out _progressTime)) return false;
			if (!reader.TryReadSingle(out _cooltime)) return false;
			if (!reader.TryReadBoolean(out _interactable)) return false;
			if (!reader.TryReadByte(out var _teamValue)) return false;
			_team = (Faction)_teamValue;
			if (!_itemCountByType.TryDeserializeEveryProperty(reader)) return false;
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_behaviourType = (InteractionBehaviourType)0;
			_size = new();
			_currentSubjectId = new();
			_progressTime = 0;
			_cooltime = 0;
			_interactable = false;
			_team = (Faction)0;
			_itemCountByType.InitializeRemoteProperties();
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[1])
				{
					InteractorSize.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[2])
				{
					NetworkIdentity.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[5])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(1);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					_itemCountByType.IgnoreSyncReliable(reader);
				}
			}
		}
		public new static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[1])
				{
					InteractorSize.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[2])
				{
					NetworkIdentity.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[3])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[4])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[5])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_0[7])
				{
					reader.Ignore(1);
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					SyncDictionary<NetInt32, NetByte>.IgnoreSyncStaticReliable(reader);
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public new static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
