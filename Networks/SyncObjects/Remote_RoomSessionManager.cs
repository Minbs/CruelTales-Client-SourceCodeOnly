/*
 * Generated File : Remote_RoomSessionManager
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.Dueoksini;
using CT.Common.Gameplay.Infos;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Gameplay.RedHood;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.SyncObjects
{
	[Serializable]
	public partial class RoomSessionManager : IRemoteSynchronizable
	{
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void ClientRoomSetReq_SetPassword(int password);
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void ClientRoomSetReq_SetRoomName(NetStringShort roomName);
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void ClientRoomSetReq_SetRoomDiscription(NetStringShort roomDiscription);
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void ClientRoomSetReq_SetRoomMaxUser(int maxUserCount);
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void ClientRoomSetReq_SetRoomMinUser(int minUserCount);
		[SyncVar]
		private NetStringShort _roomName = new();
		public NetStringShort RoomName => _roomName;
		private Action<NetStringShort>? _onRoomNameChanged;
		public event Action<NetStringShort> OnRoomNameChanged
		{
			add => _onRoomNameChanged += value;
			remove => _onRoomNameChanged -= value;
		}
		[SyncVar]
		private NetStringShort _roomDiscription = new();
		public NetStringShort RoomDiscription => _roomDiscription;
		private Action<NetStringShort>? _onRoomDiscriptionChanged;
		public event Action<NetStringShort> OnRoomDiscriptionChanged
		{
			add => _onRoomDiscriptionChanged += value;
			remove => _onRoomDiscriptionChanged -= value;
		}
		[SyncVar]
		private int _password;
		public int Password => _password;
		private Action<int>? _onPasswordChanged;
		public event Action<int> OnPasswordChanged
		{
			add => _onPasswordChanged += value;
			remove => _onPasswordChanged -= value;
		}
		[SyncVar]
		private int _maxPlayerCount;
		public int MaxPlayerCount => _maxPlayerCount;
		private Action<int>? _onMaxPlayerCountChanged;
		public event Action<int> OnMaxPlayerCountChanged
		{
			add => _onMaxPlayerCountChanged += value;
			remove => _onMaxPlayerCountChanged -= value;
		}
		[SyncVar]
		private int _minPlayerCount;
		public int MinPlayerCount => _minPlayerCount;
		private Action<int>? _onMinPlayerCountChanged;
		public event Action<int> OnMinPlayerCountChanged
		{
			add => _onMinPlayerCountChanged += value;
			remove => _onMinPlayerCountChanged -= value;
		}
		[SyncObject]
		private readonly SyncHashSet<UserId> _connectedPlayers;
		public SyncHashSet<UserId> ConnectedPlayers => _connectedPlayers;
		private Action<SyncHashSet<UserId>>? _onConnectedPlayersChanged;
		public event Action<SyncHashSet<UserId>> OnConnectedPlayersChanged
		{
			add => _onConnectedPlayersChanged += value;
			remove => _onConnectedPlayersChanged -= value;
		}
		[SyncObject]
		private readonly SyncObjectDictionary<UserId, PlayerState> _playerStateTable;
		public SyncObjectDictionary<UserId, PlayerState> PlayerStateTable => _playerStateTable;
		private Action<SyncObjectDictionary<UserId, PlayerState>>? _onPlayerStateTableChanged;
		public event Action<SyncObjectDictionary<UserId, PlayerState>> OnPlayerStateTableChanged
		{
			add => _onPlayerStateTableChanged += value;
			remove => _onPlayerStateTableChanged -= value;
		}
		[SyncRpc(SyncType.ReliableTarget)]
		public partial void ServerRoomSetAck_Callback(RoomSettingResult callback);
		[AllowNull] public IDirtyable _owner;
		public void BindOwner(IDirtyable owner) => _owner = owner;
		public RoomSessionManager()
		{
			_connectedPlayers = new(this, capacity: 16);
			_playerStateTable = new(this, maxCapacity: 16);
		}
		public RoomSessionManager(IDirtyable owner)
		{
			_owner = owner;
			_connectedPlayers = new(this, capacity: 16);
			_playerStateTable = new(this, maxCapacity: 16);
		}
		private BitmaskByte _dirtyReliable_0 = new();
		protected bool _isDirtyReliable;
		public bool IsDirtyReliable => _isDirtyReliable;
		public void MarkDirtyReliable()
		{
			_isDirtyReliable = true;
			_owner.MarkDirtyReliable();
		}
		protected bool _isDirtyUnreliable;
		public bool IsDirtyUnreliable => _isDirtyUnreliable;
		public void MarkDirtyUnreliable()
		{
			_isDirtyUnreliable = true;
			_owner.MarkDirtyUnreliable();
		}
		public partial void ClientRoomSetReq_SetPassword(int password)
		{
			ClientRoomSetReq_SetPasswordiCallstack.Add(password);
			_dirtyReliable_0[0] = true;
			MarkDirtyReliable();
		}
		private List<int> ClientRoomSetReq_SetPasswordiCallstack = new(4);
		public partial void ClientRoomSetReq_SetRoomName(NetStringShort roomName)
		{
			ClientRoomSetReq_SetRoomNameNCallstack.Add(roomName);
			_dirtyReliable_0[1] = true;
			MarkDirtyReliable();
		}
		private List<NetStringShort> ClientRoomSetReq_SetRoomNameNCallstack = new(4);
		public partial void ClientRoomSetReq_SetRoomDiscription(NetStringShort roomDiscription)
		{
			ClientRoomSetReq_SetRoomDiscriptionNCallstack.Add(roomDiscription);
			_dirtyReliable_0[2] = true;
			MarkDirtyReliable();
		}
		private List<NetStringShort> ClientRoomSetReq_SetRoomDiscriptionNCallstack = new(4);
		public partial void ClientRoomSetReq_SetRoomMaxUser(int maxUserCount)
		{
			ClientRoomSetReq_SetRoomMaxUseriCallstack.Add(maxUserCount);
			_dirtyReliable_0[3] = true;
			MarkDirtyReliable();
		}
		private List<int> ClientRoomSetReq_SetRoomMaxUseriCallstack = new(4);
		public partial void ClientRoomSetReq_SetRoomMinUser(int minUserCount)
		{
			ClientRoomSetReq_SetRoomMinUseriCallstack.Add(minUserCount);
			_dirtyReliable_0[4] = true;
			MarkDirtyReliable();
		}
		private List<int> ClientRoomSetReq_SetRoomMinUseriCallstack = new(4);
		public void ClearDirtyReliable()
		{
			_isDirtyReliable = false;
			_dirtyReliable_0.Clear();
			ClientRoomSetReq_SetPasswordiCallstack.Clear();
			ClientRoomSetReq_SetRoomNameNCallstack.Clear();
			ClientRoomSetReq_SetRoomDiscriptionNCallstack.Clear();
			ClientRoomSetReq_SetRoomMaxUseriCallstack.Clear();
			ClientRoomSetReq_SetRoomMinUseriCallstack.Clear();
		}
		public void ClearDirtyUnreliable() { }
		public void SerializeSyncReliable(IPacketWriter writer)
		{
			_dirtyReliable_0.Serialize(writer);
			if (_dirtyReliable_0[0])
			{
				byte count = (byte)ClientRoomSetReq_SetPasswordiCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = ClientRoomSetReq_SetPasswordiCallstack[i];
					writer.Put(arg);
				}
			}
			if (_dirtyReliable_0[1])
			{
				byte count = (byte)ClientRoomSetReq_SetRoomNameNCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = ClientRoomSetReq_SetRoomNameNCallstack[i];
					arg.Serialize(writer);
				}
			}
			if (_dirtyReliable_0[2])
			{
				byte count = (byte)ClientRoomSetReq_SetRoomDiscriptionNCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = ClientRoomSetReq_SetRoomDiscriptionNCallstack[i];
					arg.Serialize(writer);
				}
			}
			if (_dirtyReliable_0[3])
			{
				byte count = (byte)ClientRoomSetReq_SetRoomMaxUseriCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = ClientRoomSetReq_SetRoomMaxUseriCallstack[i];
					writer.Put(arg);
				}
			}
			if (_dirtyReliable_0[4])
			{
				byte count = (byte)ClientRoomSetReq_SetRoomMinUseriCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = ClientRoomSetReq_SetRoomMinUseriCallstack[i];
					writer.Put(arg);
				}
			}
		}
		public void SerializeSyncUnreliable(IPacketWriter writer) { }
		public void InitializeMasterProperties() { }
		public bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				if (!_roomName.TryDeserialize(reader)) return false;
				_onRoomNameChanged?.Invoke(_roomName);
			}
			if (dirtyReliable_0[1])
			{
				if (!_roomDiscription.TryDeserialize(reader)) return false;
				_onRoomDiscriptionChanged?.Invoke(_roomDiscription);
			}
			if (dirtyReliable_0[2])
			{
				if (!reader.TryReadInt32(out _password)) return false;
				_onPasswordChanged?.Invoke(_password);
			}
			if (dirtyReliable_0[3])
			{
				if (!reader.TryReadInt32(out _maxPlayerCount)) return false;
				_onMaxPlayerCountChanged?.Invoke(_maxPlayerCount);
			}
			if (dirtyReliable_0[4])
			{
				if (!reader.TryReadInt32(out _minPlayerCount)) return false;
				_onMinPlayerCountChanged?.Invoke(_minPlayerCount);
			}
			if (dirtyReliable_0[5])
			{
				if (!_connectedPlayers.TryDeserializeSyncReliable(reader)) return false;
				_onConnectedPlayersChanged?.Invoke(_connectedPlayers);
			}
			if (dirtyReliable_0[6])
			{
				if (!_playerStateTable.TryDeserializeSyncReliable(reader)) return false;
				_onPlayerStateTableChanged?.Invoke(_playerStateTable);
			}
			if (dirtyReliable_0[7])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					if (!reader.TryReadByte(out var callbackValue)) return false;
					RoomSettingResult callback = (RoomSettingResult)callbackValue;
					ServerRoomSetAck_Callback(callback);
				}
			}
			return true;
		}
		public bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!_roomName.TryDeserialize(reader)) return false;
			if (!_roomDiscription.TryDeserialize(reader)) return false;
			if (!reader.TryReadInt32(out _password)) return false;
			if (!reader.TryReadInt32(out _maxPlayerCount)) return false;
			if (!reader.TryReadInt32(out _minPlayerCount)) return false;
			if (!_connectedPlayers.TryDeserializeEveryProperty(reader)) return false;
			if (!_playerStateTable.TryDeserializeEveryProperty(reader)) return false;
			return true;
		}
		public void InitializeRemoteProperties()
		{
			_roomName = new();
			_roomDiscription = new();
			_password = 0;
			_maxPlayerCount = 0;
			_minPlayerCount = 0;
			_connectedPlayers.InitializeRemoteProperties();
			_playerStateTable.InitializeRemoteProperties();
		}
		public void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[3])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[4])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[5])
			{
				_connectedPlayers.IgnoreSyncReliable(reader);
			}
			if (dirtyReliable_0[6])
			{
				_playerStateTable.IgnoreSyncReliable(reader);
			}
			if (dirtyReliable_0[7])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0[0])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[1])
			{
				NetStringShort.IgnoreStatic(reader);
			}
			if (dirtyReliable_0[2])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[3])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[4])
			{
				reader.Ignore(4);
			}
			if (dirtyReliable_0[5])
			{
				SyncHashSet<UserId>.IgnoreSyncStaticReliable(reader);
			}
			if (dirtyReliable_0[6])
			{
				SyncObjectDictionary<UserId, PlayerState>.IgnoreSyncStaticReliable(reader);
			}
			if (dirtyReliable_0[7])
			{
				byte count = reader.ReadByte();
				for (int i = 0; i < count; i++)
				{
					reader.Ignore(1);
				}
			}
		}
		public void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
