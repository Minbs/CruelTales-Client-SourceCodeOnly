/*
 * Generated File : Remote_PlayerCharacter
 * 
 * This code has been generated by the CodeGenerator.
 * Do not modify the code arbitrarily.
 */

#nullable enable
#pragma warning disable CS0649

using System;
using System.Numerics;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using CT.Common;
using CT.Common.DataType;
using CT.Common.Exceptions;
using CT.Common.Gameplay;
using CT.Common.Quantization;
using CT.Common.Serialization;
using CT.Common.Synchronizations;
using CT.Common.Tools;
using CT.Common.DataType.Input;
using CT.Common.DataType.Primitives;
using CT.Common.DataType.Synchronizations;
using CT.Common.Gameplay.Dueoksini;
using CT.Common.Gameplay.Infos;
using CT.Common.Gameplay.PlayerCharacterStates;
using CT.Common.Gameplay.Players;
using CT.Common.Gameplay.RedHood;
using CT.Common.Tools.CodeGen;
using CT.Common.Tools.Collections;
using CT.Common.Tools.ConsoleHelper;
using CT.Common.Tools.Data;
using CT.Common.Tools.FSM;
using CT.Common.Tools.GetOpt;
using CT.Common.Tools.SharpJson;
using CTC.Networks.Synchronizations;

namespace CTC.Networks.SyncObjects.SyncObjects
{
	[Serializable]
	public partial class PlayerCharacter
	{
		public override NetworkObjectType Type => NetworkObjectType.PlayerCharacter;
		[SyncRpc(dir: SyncDirection.FromRemote, sync: SyncType.Unreliable)]
		public partial void Client_RequestInput(InputData inputData);
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_RequestTest(int fromClient);
		[SyncRpc(dir: SyncDirection.FromRemote)]
		public partial void Client_TryDropItem();
		[SyncVar]
		protected UserId _userId = new();
		public UserId UserId => _userId;
		protected Action<UserId>? _onUserIdChanged;
		public event Action<UserId> OnUserIdChanged
		{
			add => _onUserIdChanged += value;
			remove => _onUserIdChanged -= value;
		}
		[SyncVar]
		protected byte _section;
		public byte Section => _section;
		protected Action<byte>? _onSectionChanged;
		public event Action<byte> OnSectionChanged
		{
			add => _onSectionChanged += value;
			remove => _onSectionChanged -= value;
		}
		[SyncVar]
		protected FieldItemType _fieldItem;
		public FieldItemType FieldItem => _fieldItem;
		protected Action<FieldItemType>? _onFieldItemChanged;
		public event Action<FieldItemType> OnFieldItemChanged
		{
			add => _onFieldItemChanged += value;
			remove => _onFieldItemChanged -= value;
		}
		[SyncVar(SyncType.ColdData)]
		protected DokzaAnimationState _animationState;
		public DokzaAnimationState AnimationState => _animationState;
		protected Action<DokzaAnimationState>? _onAnimationStateChanged;
		public event Action<DokzaAnimationState> OnAnimationStateChanged
		{
			add => _onAnimationStateChanged += value;
			remove => _onAnimationStateChanged -= value;
		}
		[SyncVar(SyncType.ColdData)]
		protected ProxyDirection _proxyDirection;
		public ProxyDirection ProxyDirection => _proxyDirection;
		protected Action<ProxyDirection>? _onProxyDirectionChanged;
		public event Action<ProxyDirection> OnProxyDirectionChanged
		{
			add => _onProxyDirectionChanged += value;
			remove => _onProxyDirectionChanged -= value;
		}
		[SyncVar(SyncType.ColdData)]
		protected float _animationTime;
		public float AnimationTime => _animationTime;
		protected Action<float>? _onAnimationTimeChanged;
		public event Action<float> OnAnimationTimeChanged
		{
			add => _onAnimationTimeChanged += value;
			remove => _onAnimationTimeChanged -= value;
		}
		[SyncRpc]
		public virtual partial void Server_OnAnimationChanged(DokzaAnimationState state);
		[SyncRpc]
		public virtual partial void Server_OnAnimationChanged(DokzaAnimationState state, ProxyDirection direction);
		[SyncRpc]
		public virtual partial void Server_OnProxyDirectionChanged(ProxyDirection direction);
		[SyncRpc(SyncType.ReliableTarget)]
		public virtual partial void Server_OrderTest(int fromServer);
		[SyncRpc]
		public virtual partial void Server_BroadcastOrderTest(int userId, int fromSever);
		[SyncRpc]
		public virtual partial void Server_TestPositionTickByTick(Vector2 curPosition);
		public PlayerCharacter()
		{
		}
		protected BitmaskByte _dirtyReliable_0 = new();
		protected BitmaskByte _dirtyUnreliable_0 = new();
		public partial void Client_RequestTest(int fromClient)
		{
			Client_RequestTestiCallstack.Add(fromClient);
			_dirtyReliable_0[0] = true;
			MarkDirtyReliable();
		}
		protected List<int> Client_RequestTestiCallstack = new(4);
		public partial void Client_TryDropItem()
		{
			Client_TryDropItemCallstackCount++;
			_dirtyReliable_0[1] = true;
			MarkDirtyReliable();
		}
		protected byte Client_TryDropItemCallstackCount = 0;
		public partial void Client_RequestInput(InputData inputData)
		{
			Client_RequestInputICallstack.Add(inputData);
			_dirtyUnreliable_0[0] = true;
			MarkDirtyUnreliable();
		}
		protected List<InputData> Client_RequestInputICallstack = new(4);
		public override void ClearDirtyReliable()
		{
			_isDirtyReliable = false;
			_dirtyReliable_0.Clear();
			Client_RequestTestiCallstack.Clear();
			Client_TryDropItemCallstackCount = 0;
		}
		public override void ClearDirtyUnreliable()
		{
			_isDirtyUnreliable = false;
			_dirtyUnreliable_0.Clear();
			Client_RequestInputICallstack.Clear();
		}
		public override void SerializeSyncReliable(IPacketWriter writer)
		{
			_dirtyReliable_0.Serialize(writer);
			if (_dirtyReliable_0[0])
			{
				byte count = (byte)Client_RequestTestiCallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = Client_RequestTestiCallstack[i];
					writer.Put(arg);
				}
			}
			if (_dirtyReliable_0[1])
			{
				writer.Put((byte)Client_TryDropItemCallstackCount);
			}
		}
		public override void SerializeSyncUnreliable(IPacketWriter writer)
		{
			_dirtyUnreliable_0.Serialize(writer);
			if (_dirtyUnreliable_0[0])
			{
				byte count = (byte)Client_RequestInputICallstack.Count;
				writer.Put(count);
				for (int i = 0; i < count; i++)
				{
					var arg = Client_RequestInputICallstack[i];
					arg.Serialize(writer);
				}
			}
		}
		public override void InitializeMasterProperties() { }
		public override bool TryDeserializeSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					if (!_userId.TryDeserialize(reader)) return false;
					_onUserIdChanged?.Invoke(_userId);
				}
				if (dirtyReliable_0[1])
				{
					if (!reader.TryReadByte(out _section)) return false;
					_onSectionChanged?.Invoke(_section);
				}
				if (dirtyReliable_0[2])
				{
					if (!reader.TryReadUInt32(out var _fieldItemValue)) return false;
					_fieldItem = (FieldItemType)_fieldItemValue;
					_onFieldItemChanged?.Invoke(_fieldItem);
				}
				if (dirtyReliable_0[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadByte(out var stateValue)) return false;
						DokzaAnimationState state = (DokzaAnimationState)stateValue;
						Server_OnAnimationChanged(state);
					}
				}
				if (dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadByte(out var stateValue)) return false;
						DokzaAnimationState state = (DokzaAnimationState)stateValue;
						if (!reader.TryReadByte(out var directionValue)) return false;
						ProxyDirection direction = (ProxyDirection)directionValue;
						Server_OnAnimationChanged(state, direction);
					}
				}
				if (dirtyReliable_0[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadByte(out var directionValue)) return false;
						ProxyDirection direction = (ProxyDirection)directionValue;
						Server_OnProxyDirectionChanged(direction);
					}
				}
				if (dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int fromServer)) return false;
						Server_OrderTest(fromServer);
					}
				}
				if (dirtyReliable_0[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadInt32(out int userId)) return false;
						if (!reader.TryReadInt32(out int fromSever)) return false;
						Server_BroadcastOrderTest(userId, fromSever);
					}
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						if (!reader.TryReadVector2(out var curPosition)) return false;
						Server_TestPositionTickByTick(curPosition);
					}
				}
			}
			return true;
		}
		public override bool TryDeserializeSyncUnreliable(IPacketReader reader) => true;
		public override bool TryDeserializeEveryProperty(IPacketReader reader)
		{
			if (!_userId.TryDeserialize(reader)) return false;
			if (!reader.TryReadByte(out _section)) return false;
			if (!reader.TryReadUInt32(out var _fieldItemValue)) return false;
			_fieldItem = (FieldItemType)_fieldItemValue;
			if (!reader.TryReadByte(out var _animationStateValue)) return false;
			_animationState = (DokzaAnimationState)_animationStateValue;
			if (!reader.TryReadByte(out var _proxyDirectionValue)) return false;
			_proxyDirection = (ProxyDirection)_proxyDirectionValue;
			if (!reader.TryReadSingle(out _animationTime)) return false;
			return true;
		}
		public override void InitializeRemoteProperties()
		{
			_userId = new();
			_section = 0;
			_fieldItem = (FieldItemType)0;
			_animationState = (DokzaAnimationState)0;
			_proxyDirection = (ProxyDirection)0;
			_animationTime = 0;
		}
		public override void IgnoreSyncReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					UserId.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_0[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_0[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Vector2SerializeExtension.IgnoreStatic(reader);
					}
				}
			}
		}
		public static void IgnoreSyncStaticReliable(IPacketReader reader)
		{
			BitmaskByte dirtyReliable_0 = reader.ReadBitmaskByte();
			if (dirtyReliable_0.AnyTrue())
			{
				if (dirtyReliable_0[0])
				{
					UserId.IgnoreStatic(reader);
				}
				if (dirtyReliable_0[1])
				{
					reader.Ignore(1);
				}
				if (dirtyReliable_0[2])
				{
					reader.Ignore(4);
				}
				if (dirtyReliable_0[3])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_0[4])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_0[5])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(1);
					}
				}
				if (dirtyReliable_0[6])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
					}
				}
				if (dirtyReliable_0[7])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						reader.Ignore(4);
						reader.Ignore(4);
					}
				}
			}
			BitmaskByte dirtyReliable_1 = reader.ReadBitmaskByte();
			if (dirtyReliable_1.AnyTrue())
			{
				if (dirtyReliable_1[0])
				{
					byte count = reader.ReadByte();
					for (int i = 0; i < count; i++)
					{
						Vector2SerializeExtension.IgnoreStatic(reader);
					}
				}
			}
		}
		public override void IgnoreSyncUnreliable(IPacketReader reader) { }
		public static void IgnoreSyncStaticUnreliable(IPacketReader reader) { }
	}
}
#pragma warning restore CS0649
